cmake_minimum_required(VERSION 3.20)

project(Logging VERSION 1.0.0)

option(BUILD_SHARED_LIBS "Build using shared libraries" ON)

set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

file(GLOB HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/include/*/*.h ${CMAKE_CURRENT_SOURCE_DIR}/include/*/*/*.h)
file(GLOB SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)

set(LOGGING_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include/)

include_directories(${LOGGING_INCLUDE_DIR})

if (BUILD_SHARED_LIBS)
  add_library(${PROJECT_NAME} SHARED ${HEADERS} ${SOURCES})
else()
  add_library(${PROJECT_NAME} STATIC ${HEADERS} ${SOURCES})
endif(BUILD_SHARED_LIBS)

set_target_properties(${PROJECT_NAME} PROPERTIES
    VERSION 1.0.0
    SOVERSION 1
    OUTPUT_NAME ${PROJECT_NAME}
)

target_include_directories(${PROJECT_NAME} PUBLIC
  "$<BUILD_INTERFACE:${LOGGING_INCLUDE_DIR}>"
  "$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>")

include(GNUInstallDirs)
install(DIRECTORY ${LOGGING_INCLUDE_DIR} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
install(TARGETS ${PROJECT_NAME}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
